Code cleanup/Performance
  * replaced calls to eval (used to lookup the meta-parser) first by putting
    the meta-parser into the compile-time environment then by turning this
    into input and output meta-parser macros.  (This is shortly to be turned
    back into a procedure stored in the compile-time environment.)
  * Wrapped R6RS libraries around the existing code, and generally tried to
    move to an R6RS library structure.  Still requires compile-time
    environment at the very least.
Added Features
  * Support for multiple arguments in cata syntax
    (Expr : Expr ((foo #t)) -> Expr ()
      [(begin ,e0 ... ,e1)
       (let ([e0 (map (lambda (x) (Expr x foo)) e0)]
             [e1 (Expr x foo)])
         `(begin ,e0 ... ,e1))])
    can now be written
    (Expr : Expr ((foo #t)) -> Expr ()
      [(begin ,[: (e0 foo) -> e0] ... ,[: (e1 foo) -> e1])
       `(begin ,e0 ... ,e1)])
  * Support for eliminating Processor name under certain conditions:
    1. The processor is not the first to be called
    2. The processors do not take extra arguments or return extra values
    (define-pass foo-pass L-IN -> L-OUT
      (Expr : Expr () -> Expr ()
        ---)
      (Cmd : Cmd () -> Cmd ())
      (Pred : Pred () -> Pred ())
      ---
      ())
    can now be written:
    (define-pass foo-pass L-IN -> L-OUT
      (Expr : Expr () -> Expr ()
        ---)
      ())
  * Implemented support for pretty-printer syntax (this was discussed in the
    paper, but not implemented in Dipa Sarkar's latest version of the source)
  * Changed define-language definitions to be carried along to extended
    languages, with convenience syntax to remove definitions...
    (define-language L0
      (definitions
        (define-syntax foo
          (syntax-rules ()
            ---)))
      ---)
    (define-language L1 (extends L0)
      (definitions
        (- (define-syntax foo ...)))
      ---)
  * terminal predicates are now generated from a template id with an extra mark
    before being tucked into the language record so that passes defined with
    the language will refer to the terminal predicate identifier from the point
    where the language was defined.  (Thanks to Kent creating the tool to
    accomplish this: (mark id) -> (let-syntax ([a (lambda (x) id)]) a))
  * when generating system clauses for passes, both the input and output types
    of the record to be transformed are considered when choosing an appropriate
    processor to call.
